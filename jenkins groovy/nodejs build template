def call() {
    pipeline {
        agent any
        
        environment {
            DOCKER_REGISTRY = 'your-docker-registry' // 도커 레지스트리 URL 설정
            NODE_VERSION = '14' // 사용할 Node.js 버전
        }
        
        stages {
            stage('Install Dependencies') {
                steps {
                    // Node.js 패키지 설치
                    sh 'npm install'
                }
            }
            
            stage('Build') {
                steps {
                    // Node.js 애플리케이션 빌드
                    sh 'npm run build'
                }
            }
            
            stage('Build Image') {
                steps {
                    // Node.js 이미지 빌드
                    script {
                        // Node.js 이미지 빌드 명령어
                        sh "node build -t ${DOCKER_REGISTRY}/your-node-image:${NODE_VERSION} ."
                    }
                }
            }
        }
        
        post {
            success {
                echo 'Node.js application image build successful!'
            }
            failure {
                echo 'Failed to build Node.js application image. Please check the build logs.'
            }
        }
    }
}

위의 스크립트에서 NODE_VERSION과 DOCKER_REGISTRY 환경 변수를 설정하여 사용할 Node.js 버전과 도커 레지스트리 URL을 지정할 수 있습니다. 그리고 Build Image 단계에서는 Node.js의 이미지 빌드 기능을 사용하여 이미지를 빌드합니다.

사용 예시는 다음과 같습니다

@Library('your-global-library') _

checkoutBitbucketRepo('https://bitbucket.org/your_username/your_repository.git', 'your_credentials_id', 'main')

buildNodeApp()

buildNodeImage()


위의 예시에서 'your-global-library'는 Jenkins Global Pipeline Library의 이름입니다. 'your_username', 'your_repository', 'your_credentials_id'는 각각 Bitbucket 리포지토리의 사용자 이름, 리포지토리 이름, Jenkins에서 사용할 인증 정보의 ID에 해당합니다. 'main'은 체크아웃할 브랜치의 이름입니다.

이제 이 스크립트를 사용하여 Jenkins 파이프라인에서 Node.js 애플리케이션을 빌드하고 이미지를 생성할 수 있습니다.
